https://developer.nvidia.com/embedded/jetpack






以下は、NVIDIAのPyTorchをJetsonプラットフォームにインストールするためのガイドの日本語訳です。


---

PyTorch for Jetsonプラットフォームのインストール

概要

PyTorch (for JetPack) は、GPUとCPUを利用したディープラーニング用に最適化されたテンソルライブラリです。自動微分は、関数層とニューラルネットワーク層の両方でテープベースのシステムを使用して行われます。この機能により、柔軟性が高く、高速なディープラーニングフレームワークとしての特性を持ち、NumPyのような機能を加速化できます。これらは、GPUアクセラレーションとcuDNNのサポートを備えたPyTorchのPython pipホイールインストーラーです。これらのパッケージは、指定されたJetPackバージョンの上にインストールすることを前提としています。

Jetson AGX Xavier

NVIDIAのJetson AGX Xavier開発キットは、Jetsonプラットフォーム向けの世界初の自律機械用AIコンピュータです。Jetson AGX Xavierは、30W未満の消費電力でGPUワークステーションのパフォーマンスを提供します。

Jetson AGX Orin

NVIDIAのJetson AGX Orin開発キットは、高性能で省電力なJetson AGX Orinモジュールを搭載しており、他のJetsonモジュールをエミュレートすることができます。これにより、最先端のロボットや自律機械の開発に必要な性能を提供します。

Jetson Xavier NX

NVIDIAのJetson Xavier NXは、エッジ向けにスーパコンピュータの性能を提供する小型のシステムオンモジュールです。21TOPSの加速コンピューティングで、並列処理や高解像度センサーからのデータ処理を実行できます。これは完全なAIシステムに必要な性能を提供します。

1.1. PyTorch for Jetsonプラットフォームの利点

JetsonプラットフォームにPyTorchをインストールすることで、軽量でモバイルなプラットフォーム上で最新バージョンのフレームワークを利用することができます。


---

2. 前提条件とインストール

PyTorchをJetsonにインストールする前に、次の準備を行う必要があります。

1. JetPackをJetsonデバイスにインストールしてください。


2. PyTorchに必要なシステムパッケージをインストールします。



sudo apt-get -y update
sudo apt-get install -y python3-pip libopenblas-dev

JetPack 24.06以降のPyTorchをインストールする場合、cusparseltを最初にインストールする必要があります。以下のコマンドでインストールできます。

wget https://raw.githubusercontent.com/pytorch/pytorch/5c6af2b583709f6176898c017424dc9981023c28/.ci/docker/common/install_cusparselt.sh
export CUDA_VERSION=12.1
bash ./install_cusparselt.sh

次に、PyTorchをインストールします。

export TORCH_INSTALL=https://developer.download.nvidia.cn/compute/redist/jp/v511/pytorch/torch-2.0.0+nv23.05-cp38-cp38-linux_aarch64.whl

または、ホイールファイルをダウンロードして設定します。

export TORCH_INSTALL=path/to/torch-2.2.0a0+81ea7a4+nv23.12-cp38-cp38-linux_aarch64.whl

PyTorchをインストールします。

python3 -m pip install --upgrade pip
python3 -m pip install numpy=='1.26.1'
python3 -m pip install --no-cache $TORCH_INSTALL

特定のバージョンをインストールする場合は、TORCH_INSTALLを以下のように変更します。

https://developer.download.nvidia.com/compute/redist/jp/v$JP_VERSION/pytorch/$PYT_VERSION

ここで：

JP_VERSION は、使用しているJetPackのメジャーおよびマイナーバージョン（例：JetPack 4.6.1の場合は461）。

PYT_VERSION は、PyTorchホイールのリリースバージョンです。



---

2.1. 複数バージョンのPyTorchのインストール

複数のPyTorchバージョンを同時に使用する場合、仮想環境を使ってインストールできます。

仮想環境のセットアップ

sudo apt-get install virtualenv
python3 -m virtualenv -p python3 <chosen_venv_name>

仮想環境のアクティベート

source <chosen_venv_name>/bin/activate

必要なバージョンのPyTorchをインストール

pip3 install --no-cache https://developer.download.nvidia.com/compute/redist/jp/v51/pytorch/<torch_version_desired>

仮想環境の終了

deactivate

仮想環境をアクティベートして、PyTorchの特定バージョンを実行します。

source <chosen_venv_name>/bin/activate
<PyTorchのスクリプトを実行>
deactivate


---

2.2. PyTorchのアップグレード

新しいリリースがある場合、現在のPyTorchバージョンをアンインストールし、再インストールすることでアップグレードできます。


---

3. インストール確認

PyTorchが正しくインストールされたかどうかを確認するためには、Pythonプロンプトを開き、PyTorchをインポートします。

以下のコマンドを実行します。

export LD_LIBRARY_PATH=/usr/lib/llvm-8/lib:$LD_LIBRARY_PATH
python3

次に、PyTorchをインポートします。

>>> import torch

PyTorchが正しくインストールされていれば、このコマンドはエラーなく実行されます。


---

4. アンインストール

PyTorchをアンインストールするには、以下のコマンドを実行します。

sudo pip3 uninstall -y torch


---

5. トラブルシューティング

Jetsonプラットフォーム特有の問題については、NVIDIAのJetsonおよび埋め込みシステムコミュニティに参加して、ディスカッションを行ってください。


---

このドキュメントは情報提供を目的としており、製品の特定の機能、状態、品質について保証するものではありません。NVIDIAは、この文書に含まれる情報の正確性や完全性について一切の保証を行いません。


---

© 2022-2024 NVIDIA Corporation & Affiliates. All rights reserved.





JetPack 4.4 (L4T R32.4.3) / JetPack 4.4.1 (L4T R32.4.4) / JetPack 4.5 (L4T R32.5.0) / JetPack 4.5.1 (L4T R32.5.1) / JetPack 4.6 (L4T R32.6.1)
Python 3.6 - torch-1.9.0-cp36-cp36m-linux_aarch64.whl

https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048


以下は、Jetson Nano、TX1/TX2、Xavier、Orin用の、JetPack 4.2以降に対応した事前ビルドされたPyTorchのpip wheelインストーラーです。

注意：Jetson用の今後のPyTorch wheelは以下から入手できます： https://docs.nvidia.com/deeplearning/frameworks/install-pytorch-jetson-platform/index.html

お使いのJetPackバージョンに対応するPyTorchバイナリを以下からダウンロードし、Jetsonで実行するためのインストール手順を確認してください。これらのpip wheelはARM aarch64アーキテクチャ向けにビルドされているため、ホストPCではなくJetson上でコマンドを実行してください。また、jetson-containersからコンテナを使用することもできます。

PyTorch pip wheels

JetPack 6

PyTorch v2.3.0

PyTorch v2.2.0

PyTorch v2.1.0


JetPack 5

PyTorch v2.1.0

PyTorch v2.0.0

PyTorch v1.14.0

PyTorch v1.13.0

PyTorch v1.12.0

PyTorch v1.11.0


JetPack 4

PyTorch v1.10.0

PyTorch v1.9.0

PyTorch v1.8.0

PyTorch v1.7.0

PyTorch v1.6.0

PyTorch v1.5.0

PyTorch v1.4.0

PyTorch v1.3.0

PyTorch v1.2.0

PyTorch v1.1.0

PyTorch v1.0.0


インストール手順

インストール

検証

ソースからビルド

pipのアップグレードについて







Jetson NanoにPyTorchをインストールするためには、まずpipがインストールされていない場合、pipを手動でインストールする必要があります。以下の手順で進めることができます。

1. pipのインストール

まず、Jetson Nanoにpipをインストールします。ターミナルを開いて、次のコマンドを実行します：

sudo apt update
sudo apt install python3-pip

2. PyTorchのインストール

pipがインストールされたら、次にPyTorchをインストールします。JetPackのバージョンに合わせてPyTorchをインストールします。例えば、JetPack 4.6の場合は次のコマンドを実行します。

sudo pip3 install torch==1.9.0+cpu

上記のコマンドで、PyTorch v1.9.0をインストールできます。必要なバージョンが異なる場合は、PyTorchのJetsonインストールガイドから、適切なバージョンのpipインストール方法を確認してください。

3. インストール確認

インストールが完了したら、次のコマンドでインストールが正しく行われたか確認できます。

python3 -c "import torch; print(torch.__version__)"

これで、PyTorch v1.9.0が正常にインストールされているかを確認できます。

もしPyTorchのバージョンを変更したい場合は、pipコマンドでバージョンを指定して再インストールできます。




わかりました！小学生でもわかるように、この手順を簡単でわかりやすく説明します。


---

1. 準備するもの

まず、この作業をするには以下のものが必要です：

NVIDIA Jetson（Nanoなど）

インターネット接続

コマンドを入力するためのターミナル



---

2. 仮想環境を作る

仮想環境（かそうかんきょう）というものを作ることで、必要なソフトを安全にインストールできます。

手順

1. ターミナルを開きます。


2. 次のコマンドを入力してEnterを押します：

sudo apt-get update
sudo apt-get install python3-venv
python3 -m venv myenv


3. 次に、仮想環境を「起動」します：

source myenv/bin/activate




---

3. NumPyをインストールする

NumPy（ナンパイ）というソフトを先にインストールします。これを使うと、数字を簡単に計算できます。

手順

次のコマンドを入力してインストールします：

pip install 'https://github.com/jetson-nano-wheels/python3.6-numpy-1.19.4/releases/download/v0.0.2/numpy-1.19.4-cp36-cp36m-linux_aarch64.whl'


---

4. PyTorchをインストールする

次に、PyTorch（パイトーチ）というライブラリをインストールします。これは、AIや機械学習を作るための便利なツールです。

手順

1. PyTorchのファイルをダウンロードします：

wget \
    'https://nvidia.box.com/shared/static/h1z9sw4bb1ybi0rm3tu8qdj8hs05ljbm.whl' \
    -O /tmp/torch-1.9.0-cp36-cp36m-linux_aarch64.whl


2. ダウンロードしたファイルをインストールします：

pip install /tmp/torch-1.9.0-cp36-cp36m-linux_aarch64.whl




---

5. 動作確認をする

最後に、PyTorchが正しく動いているか確認しましょう。

手順

次のコマンドを入力します：

python -c "import torch; print(torch.__version__); print(torch.cuda.is_available())"

結果

「1.9.0」と表示されればバージョンが正しいです。

「True」と表示されればGPUが使える状態です。



---

6. もっと良くしたい人へ

もしも、この仕組みをもっと良くしたい人は、以下の手順で貢献できます。

手順

1. ターミナルで以下を入力して、プロジェクトをダウンロードします：

git clone git@github.com:jetson-nano-wheels/python3.6-torch-1.9.0
cd python3.6-torch-1.9.0


2. 「新しい機能を追加するための場所」を作ります：

git checkout -b feature-my-fancy-addition


3. 初期設定を実行します：

./init.sh


4. 改良した後、変更を保存してGitHubに送ります：

git add .
git commit -m "自分の変更について説明を書く"
git push origin feature-my-fancy-addition


5. GitHubで「プルリクエスト」というものを送ります。




---

これで完了です！何か困ったことがあったら、また聞いてくださいね！






https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html





エラーから判断すると、現在のPython環境にPyTorch（`torch`）とTorchvisionがインストールされていないようです。この問題を解決するには、以下の手順を試してください。

---

### **1. PyTorchをインストールする**

#### **a. GPUが使える場合 (CUDA対応のGPUがある場合)**  
まず、CUDAのバージョンを確認します。次のコマンドをターミナルで実行してください：

```bash
nvcc --version
```

これでCUDAのバージョンが確認できます（例: 11.8など）。その後、次のPyTorch公式サイトのインストールコマンドジェネレーターを参照して適切なインストールコマンドを確認してください：
[PyTorch公式サイト (Get Started)](https://pytorch.org/get-started/locally/)

#### **b. CPUのみの場合**  
次のコマンドを実行して、PyTorchをインストールします：

```bash
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
```

---

### **2. インストール確認**
インストール後、再度次のコマンドでバージョンを確認します：

```bash
python3 -c "import torch; print(torch.__version__)"
python3 -c "import torchvision; print(torchvision.__version__)"
```

エラーが出ずにバージョンが表示されれば成功です。

---

### **3. (任意) 仮想環境を使用する場合の注意**
仮想環境（例: `tf`）を使っている場合は、その環境を有効化してからインストールを行ってください。仮想環境がアクティブな状態で以下を実行します：

```bash
source ~/path/to/your/env/bin/activate
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
```

`~/path/to/your/env` は仮想環境のパスに置き換えてください。

---

これで問題が解決しない場合は、発生したエラーメッセージを教えてください。さらにサポートいたします！


(tf) kawai@kawai-desktop:~$ python3 -c "import torch; print(torch.__version__)"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ModuleNotFoundError: No module named 'torch'
(tf) kawai@kawai-desktop:~$ python3 -c "import torchvision; print(torchvision.__version__)"



2. PyTorchを使ったJetsonでのセットアップ
Jetson NanoでPyTorchを活用する際の追加ステップです。

ライブラリの確認
既にPyTorchとTorchvisionがインストールされているため、簡単に確認します。

bash
コードをコピーする
python3 -c "import torch; print(torch.__version__)"
python3 -c "import torchvision; print(torchvision.__version__)"
出力が以下のようになっていれば問題ありません：

コードをコピーする
1.9.0
0.10.0
CUDAサポートの確認
PyTorchがGPUを正しく使用できるか確認します。

python
コードをコピーする
import torch
print(torch.cuda.is_available())
Trueと表示されれば、CUDAが有効です。




エラーの原因は、現在の環境（Pythonバージョンや依存ツールなど）とTensorFlowの互換性が合っていないことにあります。以下に解決方法を説明します。

### 環境の問題点
1. **Python バージョン**: 現在の環境では `Python 3.6.9` を使用しています。  
   TensorFlow 2.6.0 は Python 3.6 に対応していますが、現在の最新バージョンの TensorFlow は Python 3.9 以上が必要です。
   
2. **GCC バージョン**: TensorFlow 2.6.0 以降では GCC 7.3.1 以上が推奨されますが、現在の GCC 7.5.0 は条件を満たしています。

3. **CUDA および cuDNN**: TensorFlow の GPU サポートを使用する場合、対応する CUDA と cuDNN バージョンが必要です。あなたの環境がそれを満たしているか不明です。

---

### 解決策
#### 1. TensorFlow バージョンを 2.6.0 に固定する
Python 3.6.9 のままで進める場合、以下の手順を試してください。

1. 仮想環境に入る（すでに仮想環境 `(tf)` にいる場合はこの手順をスキップしてください）。

2. 必要な依存関係をインストール：
   ```bash
   pip install numpy==1.19.5
   ```

3. TensorFlow 2.6.0 をインストール：
   ```bash
   pip install tensorflow==2.6.0
   ```

---

#### 2. Python バージョンをアップグレードする
TensorFlow の最新バージョンを使用したい場合、Python バージョンを 3.9 以上にアップグレードする必要があります。

1. **Python を 3.9 に更新**:
   - Ubuntu 18.04 で以下を実行して Python をアップグレードします：
     ```bash
     sudo add-apt-repository ppa:deadsnakes/ppa
     sudo apt update
     sudo apt install python3.9 python3.9-venv python3.9-dev
     ```

2. **新しい仮想環境を作成**:
   ```bash
   python3.9 -m venv tf_env
   source tf_env/bin/activate
   ```

3. TensorFlow をインストール:
   ```bash
   pip install --upgrade pip
   pip install tensorflow
   ```

---

#### 3. GPU サポートを有効にする場合
GPU バージョンを使用したい場合、以下が必要です。

1. **CUDA と cuDNN をインストール**:
   - TensorFlow 2.6.0 の場合は CUDA 11.2 と cuDNN 8.1 が必要です。
   - NVIDIA の公式ドキュメントを参照して適切なバージョンをインストールします。

2. 必要なパッケージをインストール：
   ```bash
   pip install tensorflow-gpu==2.6.0
   ```

---

### 注意
環境を変更する前に、まず使用する Python バージョンを確認して、対応する TensorFlow バージョンを選択してください。GPU を使用する場合は CUDA や cuDNN との互換性も確認が必要です。

進める中でさらにエラーが発生した場合は、詳細なエラーメッセージを教えてください。





エラーの内容から、`tensorflow[GPU]` がインストールできない原因を以下のように考えられます。これを順を追って解決していきましょう。

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
(tf) kawai@kawai-desktop:~$ pip install tensorflow==2.6.0
ERROR: Could not find a version that satisfies the requirement tensorflow==2.6.0 (from versions: none)
ERROR: No matching distribution found for tensorflow==2.6.0
(tf) kawai@kawai-desktop:~$ pip install tensorflow-gpu==2.6.0
ERROR: Could not find a version that satisfies the requirement tensorflow-gpu==2.6.0 (from versions: 2.12.0)
ERROR: No matching distribution found for tensorflow-gpu==2.6.0
(tf) kawai@kawai-desktop:~$ python --version
Python 3.6.9
(tf) kawai@kawai-desktop:~$ gcc --version
gcc (Ubuntu/Linaro 7.5.0-3ubuntu1~18.04) 7.5.0
Copyright (C) 2017 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

(tf) kawai@kawai-desktop:~$ make --version
GNU Make 4.1
Built for aarch64-unknown-linux-gnu
Copyright (C) 1988-2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.



エラーの原因は、現在の環境（Pythonバージョンや依存ツールなど）とTensorFlowの互換性が合っていないことにあります。以下に解決方法を説明します。

### 環境の問題点
1. **Python バージョン**: 現在の環境では `Python 3.6.9` を使用しています。  
   TensorFlow 2.6.0 は Python 3.6 に対応していますが、現在の最新バージョンの TensorFlow は Python 3.9 以上が必要です。
   
2. **GCC バージョン**: TensorFlow 2.6.0 以降では GCC 7.3.1 以上が推奨されますが、現在の GCC 7.5.0 は条件を満たしています。

3. **CUDA および cuDNN**: TensorFlow の GPU サポートを使用する場合、対応する CUDA と cuDNN バージョンが必要です。あなたの環境がそれを満たしているか不明です。

---

### 解決策
#### 1. TensorFlow バージョンを 2.6.0 に固定する
Python 3.6.9 のままで進める場合、以下の手順を試してください。

1. 仮想環境に入る（すでに仮想環境 `(tf)` にいる場合はこの手順をスキップしてください）。

2. 必要な依存関係をインストール：
   ```bash
   pip install numpy==1.19.5
   ```

3. TensorFlow 2.6.0 をインストール：
   ```bash
   pip install tensorflow==2.6.0
   ```

---

#### 2. Python バージョンをアップグレードする
TensorFlow の最新バージョンを使用したい場合、Python バージョンを 3.9 以上にアップグレードする必要があります。

1. **Python を 3.9 に更新**:
   - Ubuntu 18.04 で以下を実行して Python をアップグレードします：
     ```bash
     sudo add-apt-repository ppa:deadsnakes/ppa
     sudo apt update
     sudo apt install python3.9 python3.9-venv python3.9-dev
     ```

2. **新しい仮想環境を作成**:
   ```bash
   python3.9 -m venv tf_env
   source tf_env/bin/activate
   ```

3. TensorFlow をインストール:
   ```bash
   pip install --upgrade pip
   pip install tensorflow
   ```

---

#### 3. GPU サポートを有効にする場合
GPU バージョンを使用したい場合、以下が必要です。

1. **CUDA と cuDNN をインストール**:
   - TensorFlow 2.6.0 の場合は CUDA 11.2 と cuDNN 8.1 が必要です。
   - NVIDIA の公式ドキュメントを参照して適切なバージョンをインストールします。

2. 必要なパッケージをインストール：
   ```bash
   pip install tensorflow-gpu==2.6.0
   ```

---

### 注意
環境を変更する前に、まず使用する Python バージョンを確認して、対応する TensorFlow バージョンを選択してください。GPU を使用する場合は CUDA や cuDNN との互換性も確認が必要です。

進める中でさらにエラーが発生した場合は、詳細なエラーメッセージを教えてください。


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,


インストール手順
TensorFlowのインストール

bash
コードをコピーする
pip install tensorflow==2.6.0
または、対応するバージョンを以下のように指定してください。

GPUサポートのインストール GPU環境で利用する場合、必要なドライバーとCUDAツールキットをインストールした後に以下を実行します：

bash
コードをコピーする
pip install tensorflow-gpu==2.6.0

---

## **エラーの原因と解決手順**

1. **Pythonのバージョンが古い可能性**
   - TensorFlow 2.0以降は、**Python 3.8以上**を必要とします（最新バージョンでは3.9や3.10もサポート）。古いPythonを使っている場合、`tensorflow[GPU]`がインストールできません。

2. **CUDAやcuDNNのバージョンが対応していない可能性**
   - TensorFlowは特定のCUDAおよびcuDNNバージョンに依存します。お使いの環境が適合していない場合、GPU版が動作しません。

3. **`pip`が古い可能性**
   - 古い`pip`では、新しいTensorFlowが見つからないことがあります。`pip`のアップデートが必要です。

4. **インターネット接続やPyPIミラーの問題**
   - 特定のミラーサーバーを使っている場合やインターネット接続が不安定な場合、ライブラリが見つからないことがあります。

---

## **解決手順**

### **1. Pythonバージョンを確認する**
以下のコマンドでPythonのバージョンを確認してください。

```bash
python3 --version
```

**結果**が3.8未満の場合、新しいバージョンをインストールしてください。

**新しいPythonのインストール例 (Ubuntuの場合):**

```bash
sudo apt-get update
sudo apt-get install python3.9 python3.9-venv python3.9-distutils
```

インストール後、`python3.9`を使うように設定します。

---

### **2. pipのアップデート**
以下のコマンドで`pip`を最新バージョンにアップデートしてください。

```bash
pip install --upgrade pip
```

---

### **3. CUDAとcuDNNの確認**
TensorFlowの公式サイトには、対応するCUDAとcuDNNのバージョンが記載されています。以下の手順で対応するバージョンを確認し、インストールします。

#### **3.1. 対応するバージョンを確認**
[TensorFlow公式サイトのハードウェア要件](https://www.tensorflow.org/install/source#gpu)で、インストールしたいTensorFlowのバージョンに対応するCUDAとcuDNNのバージョンを確認してください。

#### **3.2. CUDAのインストール**
以下のコマンドを使ってCUDAをインストールします。

```bash
wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/12.x.x/local_installers/cuda-repo-ubuntu2004-12.x.x_amd64.deb
sudo dpkg -i cuda-repo-ubuntu2004-12.x.x_amd64.deb
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub
sudo apt-get update
sudo apt-get -y install cuda
```

#### **3.3. cuDNNのインストール**
NVIDIAの公式サイトからcuDNNをダウンロードし、インストールします。以下のコマンドを参考にしてください。

```bash
sudo dpkg -i libcudnn8*.deb
```

#### **3.4. 環境変数の設定**
`~/.bashrc`に以下を追記し、反映させます。

```bash
export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
```

適用：

```bash
source ~/.bashrc
```

---

### **4. TensorFlowの再インストール**
GPU対応版をインストールするには以下を実行してください。

```bash
pip install tensorflow
```

※`tensorflow[GPU]`という形式は現在推奨されておらず、`pip install tensorflow`で自動的にGPUサポートが有効になります。

---

### **5. インストール確認**
以下のコードでTensorFlowが正常にインストールされ、GPUが認識されているか確認します。

```python
import tensorflow as tf
print("GPUが認識されていますか？:", tf.config.list_physical_devices('GPU'))
```

---

### **補足**
- GPUが不要であれば、`tensorflow`のCPUバージョンを使用できます。その場合、CUDAやcuDNNの設定をスキップしてください。
- エラーが続く場合、環境情報（Pythonバージョン、OS、GPUモデル）を教えていただければ、さらに具体的なサポートを提供できます。

お試しください！
